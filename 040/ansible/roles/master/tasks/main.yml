---
- name: Install PostgreSQL repo
  yum:
    name: http://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
    state: present
  tags:
    - install-postgresql-repo
    - install-postgresql
    - deploy

- name: Install PostgreSQL
  yum:
    name: postgresql11-server
  tags:
    - install-postgresql
    - deploy

- name: Uninstall PostgreSQL
  yum:
    name: postgresql11-server
  tags:
    - install-postgresql
    - deploy

- name: Remove PostgreSQL data dir
  shell: rm -rf /var/lib/pgsql/11
  tags:
    - remove-postgresql-data-dir
    - deploy

- name: Create test database
  postgresql_db:
    name: test
    encoding: UTF-8
    template: template0

- name: Create test database
  postgresql_db:
    name: user1
    encoding: UTF-8
    template: template0
  tags:
    - ansibled-postgresql

#- name: Create replication user
#  postgresql_user:
#    db: user1
#    name: user1
#    password: user1
#    role_attr_flags: REPLICATION
#    priv: "CONNECT/products:ALL"
#    expires: infinity
#  tags:
#    - ansibled-postgresql

- name: Init PostgreSQL
  shell: /usr/pgsql-11/bin/postgresql-11-setup initdb
  tags:
    - init-postgresql
    - deploy

- name: Collect-pg.conf-files
  copy:
    src: ../files/{{ item }}
    dest: /var/lib/pgsql/11/data/{{ item }}
  loop:
    - pg_hba.conf
    - postgresql.conf
  tags:
    - collect-pg.conf-files
    - deploy
  notify:
    - restart-postgresql

- name: Force restart PostgreSQL
  systemd:
    name: postgresql-11
    state: restarted
    enabled: true
  tags:
    - collect-pg.conf-files
    - force-restart-postgresql
    - deploy

- name: download barman
  get_url:
    url: https://dl.2ndquadrant.com/default/release/get/11/rpm
    dest: /home/vagrant/barman-repo.sh
    mode: 0777
  tags:
    - download-barman
    - deploy-barman

- name: install barman-repo
  shell: /home/vagrant/barman-repo.sh
  args:
    creates: /etc/yum.repos.d/2ndquadrant-dl-default-release-pg11.repo
  tags:
    - install-barman-repo
    - deploy-barman

- name: install barman
  pip:
    name:
      - python2-dateutil
    state: present
  tags:
    - install-by-pip

- name: install barman
  yum:
    name:
      - barman
      - barman-cli
    state: present
  tags:
    - install-barman
    - deploy-barman

- name: PostgreSQL init db
  shell: /usr/pgsql-11/bin/postgresql-11-setup initdb
  args:
    creates: /var/lib/pgsql/11/data/postgresql.conf

- name: Create PostgreSQL slot
  become_user: postgres
  shell: psql postgres -c "SELECT pg_create_physical_replication_slot('pg_slot_replication')"
  tags:
    - postgres-replication-init
    - deploy

- name: Create PostgreSQL database
  become_user: postgres
  shell: psql postgres -c "CREATE DATABASE test"
  tags:
    - postgres-user-init
    - deploy

- name: Create PostgreSQL user
  become_user: postgres
  shell: psql postgres -c "CREATE USER test WITH ENCRYPTED PASSWORD 'test'; GRANT ALL PRIVILEGES ON DATABASE test TO test;"
  tags:
    - postgres-user-init
    - deploy

- name: Create PostgreSQL replicator user
  become_user: postgres
  shell: psql postgres -c "CREATE USER replicator WITH REPLICATION PASSWORD 'replicator'"
  tags:
    - postgres-replication-init
    - deploy

- name: Create PostgreSQL super barman user
  become_user: postgres
  shell: psql postgres -c "CREATE USER super_barman WITH SUPERUSER PASSWORD 'barman'"
  tags:
    - postgres-replication-init
    - deploy-barman
    - deploy

- name: Create PostgreSQL replicator barman user
  become_user: postgres
  shell: psql postgres -c "CREATE USER replicator_barman WITH REPLICATION PASSWORD 'barman'"
  tags:
    - postgres-replication-init
    - deploy-barman
    - deploy

#- name: Get last Percona-Server-server version
#  shell: yum list | grep -i "Percona-Server-server." | sort | tail -1 | awk -F'.' '{print $1}'
#  register: last_percona_server_version
#  tags:
#    - get-percona-server-last-version
#    - install-percona
#    - deploy
#
#- name: Print Last Percona Server version
#  debug: msg="Last Percona Server version is '{{ last_percona_server_version['stdout'] }}'"
#  tags:
#    - get-percona-server-last-version
#    - install-percona
#    - deploy
#
#- name: "Install last Percona Server version: {{ last_percona_server_version['stdout'] }}"
#  yum:
#    name: "{{ last_percona_server_version['stdout'] }}"
#    state: present
#  tags:
#    - install-percona
#    - deploy
#
#- name: Collect /etc/my.cnf.d/ files
#  copy:
#    src: ../files/etc/my.cnf.d/
#    dest: /etc/my.cnf.d/
#  tags:
#    - collect-my.cnf.d-files
#    - deploy
#/var/lib/pgsql/12/data/pg_hba.conf
#- name: Collect /etc/my.cnf.d/ templated files
#  template:
#    src: ../files/etc/{{ item }}
#    dest: /etc/{{ item }}
#  loop:
#    - my.cnf.d/00-bindaddress.cnf
#    - my.cnf.d/01-base.cnf
#    - my.cnf.d/05-binlog.cnf
##    - my.cnf
#  tags:
#    - collect-my.cnf.d-templated-files
#    - deploy
#
#- name: Start MySQL
#  systemd:
#    state: restarted
#    name: mysql
#    enabled: true
#  tags:
#    - systemctl-start-mysql
#    - deploy
#
#- name: MySQL root password
#  shell: cat /var/log/mysqld.log | grep 'root@localhost:' | tail -1 | awk '{print $11}'
#  register: last_mysql_root_password
#  tags:
#    - get-mysql-root-password
#    - mysql-alter-root-identified
#    - get-mysql-server-id
#    - deploy
#
#- name: Print MySQL root password
#  debug: msg="MySQL root password is '{{ last_mysql_root_password['stdout'] }}'"
#  tags:
#    - get-mysql-root-password
#    - get-mysql-server-id
#    - mysql-alter-root-identified
#    - deploy
#
#- name: Mysql | ALTER ROOT USER
#  shell: mysql --connect-expired-password -uroot -p'{{ last_mysql_root_password['stdout'] }}' -e "ALTER USER USER() IDENTIFIED BY '{{ mysql_root_password }}';"
#  tags:
#    - mysql-alter-root-identified
#    - deploy
#
#- name: Just for ansible example reexecuting
#  lineinfile:
#    insertafter: EOF
#    dest: /var/log/mysqld.log
#    line: "0000-00-00T00:00:00.000000Z 1 [Note] A password is generated by ansible for root@localhost: {{ mysql_root_password }}"
#  tags:
#    - mysql-alter-root-identified
#    - deploy
#
## ERROR 1820 (HY000) at line 1: You must reset your password using ALTER USER statement before executing this statement.
#- name: Mysql | SELECT server_id
#  shell: mysql --connect-expired-password -uroot -p'{{ mysql_root_password }}' -e 'SELECT @@server_id;'
#  register: mysql_server_id
#  tags:
#    - get-mysql-server-id
#    - deploy
#
#- name: Print Mysql server id
#  debug: msg={{ mysql_server_id['stdout'] }}
#  tags:
#    - get-mysql-server-id
#    - deploy
#
#- name: Mysql | SELECT SHOW VARIABLES LIKE 'gtid_mode'
#  shell: mysql --connect-expired-password -uroot -p'{{ mysql_root_password }}' -e "SHOW VARIABLES LIKE 'gtid_mode';"
#  register: gtid_mode
#  tags:
#    - get-mysql-gtid-mode
#    - deploy
#
#- name: Mysql | 'gtid_mode' VARIABLES
#  debug: msg="Mysql gtid mode is'{{ gtid_mode['stdout'] }}'"
#  tags:
#    - get-mysql-gtid-mode
#    - deploy
#
#- name: Mysql | CREATE DATABASE `bet`;
#  shell: mysql -uroot -p'{{ mysql_root_password }}' -e "DROP DATABASE IF EXISTS bet; CREATE DATABASE bet;"
#  tags:
#    - post-mysql-create-database
#    - deploy
#
#- name: Collect dump file
#  copy:
#    src: ../files/bet.dmp
#    dest: /home/vagrant/common/bet.dmp
#  tags:
#    - post-mysql-insert-database-data
#    - deploy
#
#- name: Mysql | Restore database `bet`;
#  shell: mysql -uroot -p'{{ mysql_root_password }}' -D bet < /home/vagrant/common/bet.dmp
#  tags:
#    - post-mysql-insert-database-data
#    - deploy
#
#- name: Mysql | CREATE repl USER;
#  shell: mysql -uroot -p'{{ mysql_root_password }}' -e "CREATE USER 'repl'@'%' IDENTIFIED BY '!OtusLinux2021';GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%' IDENTIFIED BY '!OtusLinux2021';"
#  register: database_tables
#  tags:
#    - get-mysql-database-tables
#    - deploy
#
#- name: Mysql | Dump database all master databases
#  shell: mysqldump --all-databases --triggers --routines --master-data --ignore-table=bet.events_on_demand --ignore-table=bet.v_same_event  -uroot -p'{{ mysql_root_password }}' > /home/vagrant/common/master.sql
#  tags:
#    - post-mysql-insert-database-data
#    - deploy
#
#- name: Start MySQL
#  systemd:
#    state: restarted
#    name: mysql
#  tags:
#    - systemctl-start-mysql
#    - deploy
#
#- name: Mysql | iptables
#  shell: |
#    iptables -I INPUT -p udp --dport 3306 -j ACCEPT
#    iptables -I INPUT -p tcp --dport 3306 --syn -j ACCEPT
#    iptables-save
#    exit 0
#  tags:
#    - iptables
#    - deploy
